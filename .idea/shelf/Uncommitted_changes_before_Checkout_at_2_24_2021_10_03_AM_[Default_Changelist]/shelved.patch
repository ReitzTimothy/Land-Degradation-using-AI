Index: FoliumPrecipitation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import ee\r\nimport datetime\r\nimport folium\r\nimport numpy as np\r\n\r\n\r\n# Define a method for displaying Earth Engine image tiles to folium map.\r\ndef add_ee_layer(self, eeImageObject, visParams, name):\r\n  mapID = ee.Image(eeImageObject).getMapId(visParams)\r\n  folium.raster_layers.TileLayer(\r\n    tiles = mapID['tile_fetcher'].url_format,\r\n    attr = \"Map Data &copy; <a href='https://earthengine.google.com/'>Google Earth Engine</a>\",\r\n    name = name,\r\n    overlay = True,\r\n    control = True\r\n  ).add_to(self)\r\n\r\n\r\n\r\n\r\n#create a folium map and save it to the same directory as the script\r\ndef makeMapFromImage(filename, imageOverlay, layerName, startLoc, startZoom):\r\n    #Create a folium map centered on Columbia\r\n    m = folium.Map(location=startLoc,zoom_start=startZoom)\r\n\r\n    #Earth engine visualization parameters for the layer we will overlay on the map\r\n    visParams = {'palette':['D4394A', 'F66C45', 'FCAF62', 'FFE18B', 'E7F598', 'AADBA4','63C1A3', '3180BA'], 'gain':[.1], 'opacity':.8}\r\n\r\n    #mask overlay so that 0 values are not displayed\r\n    imageOverlay=imageOverlay.updateMask(imageOverlay)\r\n\r\n\r\n    #Overlay the image from the earth engine dataset on the folium map\r\n    m.add_ee_layer(imageOverlay, visParams, layerName)\r\n\r\n    # Add a layer control panel to the map.\r\n    m.add_child(folium.LayerControl())\r\n\r\n    #Save the map to an HTML file \r\n    m.save(filename+\".html\")\r\n\r\n\r\n#Iterate over images in a list and output a numpy array of total precipitation in a specified region\r\ndef getTotalPrecipitationForRegion(imlist, region, scale):\r\n    listSize = imlist.length().getInfo()\r\n    out = np.empty(shape=listSize)\r\n    for i in range(listSize):\r\n        tot = ee.Image(imlist.get(i)).reduceRegion(reducer = ee.Reducer.mean(), geometry = region, scale = scale, maxPixels = 1e9);\r\n        out[i] = (tot.getInfo()['precipitation'])\r\n        if i%10 == 0:\r\n            print(\"aggregating precipitation \",i,\"/\",listSize)\r\n    return out\r\n    \r\n#Iterate over each year and get total precipitation for region\r\n#TODO: make this output a 2d numpy array instead of printing to the console\r\ndef listDailyPrecipitationTotalsForYearRange(startYear, endYear, region):\r\n    startDay = '01-01'\r\n    endDay = '01-01'\r\n\r\n    for year in range(startYear, endYear):\r\n        print(\"Year: \"+str(year))\r\n    \r\n        #Date range to filter dataset on\r\n        startDate = str(year)+'-'+startDay\r\n        endDate = str(year+1)+'-'+endDay\r\n        \r\n        #Get our dataset from earth engine and filter it on a date range\r\n        dataset = get_dataset(startDate,endDate)\r\n\r\n        #Convert the dataset into a list of earth engine image objects and get the first one from the list.  This is inefficient so use filter() when you can\r\n        datalist = dataset.toList(dataset.size())\r\n\r\n        #agregate the total rainfall for the area into a numpy where each entry is the aggreagate of the rainfall in each image in the list\r\n        totals = getTotalPrecipitationForRegion(datalist, region, 200)\r\n        for i in totals:\r\n            print(i)\r\n\r\ndef get_dataset(startDate,endDate):\r\n    dataset = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY').filter(ee.Filter.date(startDate , endDate))\r\n    precipitation = dataset.select('precipitation')\r\n    print(\"this is your code: \")\r\n    print(precipitation)\r\n    return precipitation\r\n\r\n\r\n    \r\n\r\n\r\ndef main():\r\n\r\n\r\n#Get an authentication token from google, do every time if running on the cloud, do first time only if running local\r\n#ee.Authenticate()\r\n# Add EE drawing method to folium.\r\n    folium.Map.add_ee_layer = add_ee_layer\r\n#Initialize the earth engine API\r\n    ee.Initialize()\r\n\r\n\r\n\r\n#Geographic area to use\r\n    geoArea = ee.Geometry.Rectangle(-79.55,12.43,-65.46,-4.86)\r\n\r\n#Years to loop over and print data\r\n    startYear = 1989\r\n    endYear = 1990\r\n\r\n    listDailyPrecipitationTotalsForYearRange(startYear, endYear, geoArea)\r\n\r\n\r\n\r\n\r\n#Create overlays for the images and clip them to the area we want to analyze (uses lat/long coords)\r\n#precipitationOverlay = ee.Image(datalist.get(0)).clip(geoArea)\r\n\r\n#make map out of the overlay\r\n#makeMapFromImage(\"map\", precipitationOverlay, \"Precipitation\", [4.1156735, -72.9301367], 5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#Things I still need to figure out\r\n    #How to make a smooth gradient color transition instead of color pallette\r\n    #How to normalize the dataset ranges to be between 0 and 1\r\n    #How to load the background map in grayscale to avoid polluting the overlay with green from forested areas while keeping opacity\r\n\r\n\r\n\r\n\r\n\r\n\r\n#Example of date time conversion between earth engine and python formats\r\n# ee_date = ee.Date('2020-01-01')\r\n# py_date = datetime.datetime.utcfromtimestamp(ee_date.getInfo()['value']/1000.0)\r\n\r\n# py_date = datetime.datetime.utcnow()\r\n# ee_date = ee.Date(py_date)\r\n\r\nif __name__ == '__main__':\r\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FoliumPrecipitation.py b/FoliumPrecipitation.py
--- a/FoliumPrecipitation.py	(revision 6176b21d5aac8974032d22778ec86dc04cb18ae5)
+++ b/FoliumPrecipitation.py	(date 1614178939912)
@@ -53,39 +53,30 @@
     
 #Iterate over each year and get total precipitation for region
 #TODO: make this output a 2d numpy array instead of printing to the console
-def listDailyPrecipitationTotalsForYearRange(startYear, endYear, region):
-    startDay = '01-01'
-    endDay = '01-01'
-
-    for year in range(startYear, endYear):
-        print("Year: "+str(year))
-    
-        #Date range to filter dataset on
-        startDate = str(year)+'-'+startDay
-        endDate = str(year+1)+'-'+endDay
-        
-        #Get our dataset from earth engine and filter it on a date range
-        dataset = get_dataset(startDate,endDate)
+def listDailyPrecipitationTotalsForYear(startYear,region,dataset):
 
-        #Convert the dataset into a list of earth engine image objects and get the first one from the list.  This is inefficient so use filter() when you can
-        datalist = dataset.toList(dataset.size())
+    #Convert the dataset into a list of earth engine image objects and get the first one from the list.  This is inefficient so use filter() when you can
+    datalist = dataset.toList(dataset.size())
 
-        #agregate the total rainfall for the area into a numpy where each entry is the aggreagate of the rainfall in each image in the list
-        totals = getTotalPrecipitationForRegion(datalist, region, 200)
-        for i in totals:
-            print(i)
+    #agregate the total rainfall for the area into a numpy where each entry is the aggreagate of the rainfall in each image in the list
+    totals = getTotalPrecipitationForRegion(datalist, region, 200)
+    for i in totals:
+        print(i)
 
 def get_dataset(startDate,endDate):
     dataset = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY').filter(ee.Filter.date(startDate , endDate))
-    precipitation = dataset.select('precipitation')
+    return dataset
+
+def select_data(dataset,data):
+    dataout = dataset.select(data)
+    return dataout
+
+def viualize_data(dataset):
     print("this is your code: ")
-    print(precipitation)
-    return precipitation
+    print(dataset)
 
 
-    
 
-
 def main():
 
 
@@ -98,14 +89,25 @@
 
 
 
+
+
 #Geographic area to use
     geoArea = ee.Geometry.Rectangle(-79.55,12.43,-65.46,-4.86)
 
 #Years to loop over and print data
-    startYear = 1989
+    startDay = '01-01'
+    endDay = '01-01'
+    startYear = 1988
     endYear = 1990
+    startDate = str(startYear)+'-'+startDay
+    endDate = str(endYear+1)+'-'+endDay
+
 
-    listDailyPrecipitationTotalsForYearRange(startYear, endYear, geoArea)
+    dataset=get_dataset(startDate,endDate)
+
+    for year in range(startYear, endYear):
+        print("Year: "+str(year))
+        listDailyPrecipitationTotalsForYear(year,geoArea,select_data(dataset,'precipitation'))
 
 
 
